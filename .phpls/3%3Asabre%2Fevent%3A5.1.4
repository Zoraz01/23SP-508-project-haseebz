O:26:"LanguageServer\Index\Index":4:{s:11:"definitions";a:86:{s:11:"Sabre\Event";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:11:"Sabre\Event";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"Sabre\Event";s:4:"kind";i:3;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:22;}}}s:13:"containerName";s:5:"Sabre";}s:4:"type";N;s:15:"declarationLine";s:22:"namespace Sabre\Event;";s:13:"documentation";N;s:20:"signatureInformation";N;}s:24:"Sabre\Event\EventEmitter";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:24:"Sabre\Event\EventEmitter";s:7:"extends";a:1:{i:0;s:24:"Sabre\Event\EmitterTrait";}s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:12:"EventEmitter";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EventEmitter.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:16;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:19;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:46:"class EventEmitter implements EmitterInterface";s:13:"documentation";s:125:"This is the old name for the Emitter class.

Instead of using EventEmitter, please use Emitter. They are identical
otherwise.";s:20:"signatureInformation";N;}s:32:"Sabre\Event\WildcardEmitterTrait";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\WildcardEmitterTrait";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:20:"WildcardEmitterTrait";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:21;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:232;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:26:"trait WildcardEmitterTrait";s:13:"documentation";s:311:"Wildcard Emitter Trait.

This trait provides the implementation for WildCardEmitter
Refer to that class for the full documentation about this
trait.

Normally you can just instantiate that class, but if you want to add
emitter functionality to existing classes, using the trait might be a
better way to do this.";s:20:"signatureInformation";N;}s:38:"Sabre\Event\WildcardEmitterTrait->on()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:38:"Sabre\Event\WildcardEmitterTrait->on()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:2:"on";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:26;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:46;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:78:"public function on(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:22:"Subscribe to an event.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:22:"Subscribe to an event.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:40:"Sabre\Event\WildcardEmitterTrait->once()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:40:"Sabre\Event\WildcardEmitterTrait->once()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"once";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:51;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:61;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:80:"public function once(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:40:"Sabre\Event\WildcardEmitterTrait->emit()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:40:"Sabre\Event\WildcardEmitterTrait->emit()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"emit";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:84;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:113;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:103:"public function emit(string $eventName, array $arguments = [], callable $continueCallBack = null): bool";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:77:"(string $eventName, array $arguments = [], callable $continueCallBack = null)";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:21:"array $arguments = []";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:33:"callable $continueCallBack = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:45:"Sabre\Event\WildcardEmitterTrait->listeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:45:"Sabre\Event\WildcardEmitterTrait->listeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"listeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:123;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:154;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:51:"public function listeners(string $eventName): array";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:19:"(string $eventName)";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:50:"Sabre\Event\WildcardEmitterTrait->removeListener()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:50:"Sabre\Event\WildcardEmitterTrait->removeListener()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"removeListener";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:162;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:188;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:75:"public function removeListener(string $eventName, callable $listener): bool";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:39:"(string $eventName, callable $listener)";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $listener";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:54:"Sabre\Event\WildcardEmitterTrait->removeAllListeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:54:"Sabre\Event\WildcardEmitterTrait->removeAllListeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:18:"removeAllListeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:197;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:213;s:9:"character";i:5;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:60:"public function removeAllListeners(string $eventName = null)";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:26:"(string $eventName = null)";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:24:"string $eventName = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:43:"Sabre\Event\WildcardEmitterTrait->listeners";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:43:"Sabre\Event\WildcardEmitterTrait->listeners";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"listeners";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:218;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:218;s:9:"character";i:24;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:21:"protected $listeners;";s:13:"documentation";s:22:"The list of listeners.";s:20:"signatureInformation";N;}s:51:"Sabre\Event\WildcardEmitterTrait->wildcardListeners";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:51:"Sabre\Event\WildcardEmitterTrait->wildcardListeners";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:17:"wildcardListeners";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:223;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:223;s:9:"character";i:32;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:29:"protected $wildcardListeners;";s:13:"documentation";s:33:"The list of "wildcard listeners".";s:20:"signatureInformation";N;}s:47:"Sabre\Event\WildcardEmitterTrait->listenerIndex";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:47:"Sabre\Event\WildcardEmitterTrait->listenerIndex";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"listenerIndex";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:231;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:231;s:9:"character";i:28;}}}s:13:"containerName";s:32:"Sabre\Event\WildcardEmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:25:"protected $listenerIndex;";s:13:"documentation";s:182:"An index of listeners for a specific event name. This helps speeding
up emitting events after all listeners have been set.

If the list of listeners changes though, the index clears.";s:20:"signatureInformation";N;}s:28:"Sabre\Event\EmitterInterface";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:28:"Sabre\Event\EmitterInterface";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:16:"EmitterInterface";s:4:"kind";i:11;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:16;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:77;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:26:"interface EmitterInterface";s:13:"documentation";s:107:"Event Emitter Interface.

Anything that accepts listeners and emits events should implement this
interface.";s:20:"signatureInformation";N;}s:34:"Sabre\Event\EmitterInterface->on()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:34:"Sabre\Event\EmitterInterface->on()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:2:"on";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:21;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:21;s:9:"character";i:83;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:79:"public function on(string $eventName, callable $callBack, int $priority = 100);";s:13:"documentation";s:22:"Subscribe to an event.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:22:"Subscribe to an event.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:36:"Sabre\Event\EmitterInterface->once()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:36:"Sabre\Event\EmitterInterface->once()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"once";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:26;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:26;s:9:"character";i:85;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:81:"public function once(string $eventName, callable $callBack, int $priority = 100);";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:36:"Sabre\Event\EmitterInterface->emit()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:36:"Sabre\Event\EmitterInterface->emit()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"emit";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:49;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:49;s:9:"character";i:108;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:104:"public function emit(string $eventName, array $arguments = [], callable $continueCallBack = null): bool;";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:77:"(string $eventName, array $arguments = [], callable $continueCallBack = null)";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:21:"array $arguments = []";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:33:"callable $continueCallBack = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:41:"Sabre\Event\EmitterInterface->listeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:41:"Sabre\Event\EmitterInterface->listeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"listeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:59;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:59;s:9:"character";i:56;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:52:"public function listeners(string $eventName): array;";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:19:"(string $eventName)";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:46:"Sabre\Event\EmitterInterface->removeListener()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:46:"Sabre\Event\EmitterInterface->removeListener()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"removeListener";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:67;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:67;s:9:"character";i:80;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:76:"public function removeListener(string $eventName, callable $listener): bool;";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:39:"(string $eventName, callable $listener)";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $listener";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:50:"Sabre\Event\EmitterInterface->removeAllListeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:50:"Sabre\Event\EmitterInterface->removeAllListeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:18:"removeAllListeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:128:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterInterface.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:76;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:76;s:9:"character";i:65;}}}s:13:"containerName";s:28:"Sabre\Event\EmitterInterface";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:61:"public function removeAllListeners(string $eventName = null);";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:26:"(string $eventName = null)";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:24:"string $eventName = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:19:"Sabre\Event\Promise";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:19:"Sabre\Event\Promise";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:19:"Sabre\Event\Promise";s:4:"kind";i:3;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:30;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:30:"namespace Sabre\Event\Promise;";s:13:"documentation";N;s:20:"signatureInformation";N;}s:28:"Sabre\Event\Promise::PENDING";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:28:"Sabre\Event\Promise::PENDING";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"PENDING";s:4:"kind";i:14;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:32;s:9:"character";i:10;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:32;s:9:"character";i:21;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Integer":0:{}s:15:"declarationLine";s:18:"const PENDING = 0;";s:13:"documentation";s:38:"The asynchronous operation is pending.";s:20:"signatureInformation";N;}s:30:"Sabre\Event\Promise::FULFILLED";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:30:"Sabre\Event\Promise::FULFILLED";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"FULFILLED";s:4:"kind";i:14;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:37;s:9:"character";i:10;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:37;s:9:"character";i:23;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Integer":0:{}s:15:"declarationLine";s:20:"const FULFILLED = 1;";s:13:"documentation";s:59:"The asynchronous operation has completed, and has a result.";s:20:"signatureInformation";N;}s:29:"Sabre\Event\Promise::REJECTED";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Promise::REJECTED";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:8:"REJECTED";s:4:"kind";i:14;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:42;s:9:"character";i:10;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:42;s:9:"character";i:22;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Integer":0:{}s:15:"declarationLine";s:19:"const REJECTED = 2;";s:13:"documentation";s:55:"The asynchronous operation has completed with an error.";s:20:"signatureInformation";N;}s:26:"Sabre\Event\Promise->state";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:26:"Sabre\Event\Promise->state";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:5:"state";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:49;s:9:"character";i:11;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:49;s:9:"character";i:17;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Integer":0:{}s:15:"declarationLine";s:14:"public $state;";s:13:"documentation";s:34:"The current state of this promise.";s:20:"signatureInformation";N;}s:34:"Sabre\Event\Promise->__construct()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:34:"Sabre\Event\Promise->__construct()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"__construct";s:4:"kind";i:9;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:60;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:68;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:54:"public function __construct(callable $executor = null)";s:13:"documentation";s:213:"Creates the promise.

The passed argument is the executor. The executor is automatically
called with two arguments.

Each are callbacks that map to $this->fulfill and $this->reject.
Using the executor is optional.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:27:"(callable $executor = null)";s:13:"documentation";s:213:"Creates the promise.

The passed argument is the executor. The executor is automatically
called with two arguments.

Each are callbacks that map to $this->fulfill and $this->reject.
Using the executor is optional.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:25:"callable $executor = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:27:"Sabre\Event\Promise->then()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:27:"Sabre\Event\Promise->then()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"then";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:89;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:115;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:88:"public function then(callable $onFulfilled = null, callable $onRejected = null): Promise";s:13:"documentation";s:701:"This method allows you to specify the callback that will be called after
the promise has been fulfilled or rejected.

Both arguments are optional.

This method returns a new promise, which can be used for chaining.
If either the onFulfilled or onRejected callback is called, you may
return a result from this callback.

If the result of this callback is yet another promise, the result of
_that_ promise will be used to set the result of the returned promise.

If either of the callbacks return any other value, the returned promise
is automatically fulfilled with that value.

If either of the callbacks throw an exception, the returned promise will
be rejected and the exception will be passed back.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:59:"(callable $onFulfilled = null, callable $onRejected = null)";s:13:"documentation";s:701:"This method allows you to specify the callback that will be called after
the promise has been fulfilled or rejected.

Both arguments are optional.

This method returns a new promise, which can be used for chaining.
If either the onFulfilled or onRejected callback is called, you may
return a result from this callback.

If the result of this callback is yet another promise, the result of
_that_ promise will be used to set the result of the returned promise.

If either of the callbacks return any other value, the returned promise
is automatically fulfilled with that value.

If either of the callbacks throw an exception, the returned promise will
be rejected and the exception will be passed back.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:28:"callable $onFulfilled = null";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:27:"callable $onRejected = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:32:"Sabre\Event\Promise->otherwise()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\Promise->otherwise()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"otherwise";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:123;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:126;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:56:"public function otherwise(callable $onRejected): Promise";s:13:"documentation";s:132:"Add a callback for when this promise is rejected.

Its usage is identical to then(). However, the otherwise() function is
preferred.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:22:"(callable $onRejected)";s:13:"documentation";s:132:"Add a callback for when this promise is rejected.

Its usage is identical to then(). However, the otherwise() function is
preferred.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:20:"callable $onRejected";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:30:"Sabre\Event\Promise->fulfill()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:30:"Sabre\Event\Promise->fulfill()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"fulfill";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:133;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:143;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:38:"public function fulfill($value = null)";s:13:"documentation";s:58:"Marks this promise as fulfilled and sets its return value.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:21:"(mixed $value = null)";s:13:"documentation";s:58:"Marks this promise as fulfilled and sets its return value.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"mixed $value = null";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:29:"Sabre\Event\Promise->reject()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Promise->reject()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:6:"reject";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:148;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:158;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:41:"public function reject(Throwable $reason)";s:13:"documentation";s:61:"Marks this promise as rejected, and set its rejection reason.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:20:"(\Throwable $reason)";s:13:"documentation";s:61:"Marks this promise as rejected, and set its rejection reason.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"\Throwable $reason";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:27:"Sabre\Event\Promise->wait()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:27:"Sabre\Event\Promise->wait()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"wait";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:174;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:195;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:22:"public function wait()";s:13:"documentation";s:379:"Stops execution until this promise is resolved.

This method stops execution completely. If the promise is successful with
a value, this method will return this value. If the promise was
rejected, this method will throw an exception.

This effectively turns the asynchronous operation into a synchronous
one. In PHP it might be useful to call this on the last promise in a
chain.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:379:"Stops execution until this promise is resolved.

This method stops execution completely. If the promise is successful with
a value, this method will return this value. If the promise was
rejected, this method will throw an exception.

This effectively turns the asynchronous operation into a synchronous
one. In PHP it might be useful to call this on the last promise in a
chain.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:32:"Sabre\Event\Promise->subscribers";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\Promise->subscribers";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"subscribers";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:203;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:203;s:9:"character";i:26;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:23:"protected $subscribers;";s:13:"documentation";s:125:"A list of subscribers. Subscribers are the callbacks that want us to let
them know if the callback was fulfilled or rejected.";s:20:"signatureInformation";N;}s:26:"Sabre\Event\Promise->value";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:26:"Sabre\Event\Promise->value";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:5:"value";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:213;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:213;s:9:"character";i:20;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:17:"protected $value;";s:13:"documentation";s:158:"The result of the promise.

If the promise was fulfilled, this will be the result value. If the
promise was rejected, this property hold the rejection reason.";s:20:"signatureInformation";N;}s:37:"Sabre\Event\Promise->invokeCallback()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:37:"Sabre\Event\Promise->invokeCallback()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"invokeCallback";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:224;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:259;s:9:"character";i:5;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:79:"private function invokeCallback(Promise $subPromise, callable $callBack = null)";s:13:"documentation";s:222:"This method is used to call either an onFulfilled or onRejected callback.

This method makes sure that the result of these callbacks are handled
correctly, and any chained promises are also correctly fulfilled or
rejected.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:61:"(\Sabre\Event\Promise $subPromise, callable $callBack = null)";s:13:"documentation";s:222:"This method is used to call either an onFulfilled or onRejected callback.

This method makes sure that the result of these callbacks are handled
correctly, and any chained promises are also correctly fulfilled or
rejected.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:32:"\Sabre\Event\Promise $subPromise";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:25:"callable $callBack = null";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:25:"Sabre\Event\Promise\all()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:25:"Sabre\Event\Promise\all()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:3:"all";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:32;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:62;s:9:"character";i:1;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:38:"function all(array $promises): Promise";s:13:"documentation";s:454:"This function takes an array of Promises, and returns a Promise that
resolves when all the given arguments have resolved.

The returned Promise will resolve with a value that's an array of all the
values the given promises have been resolved with.

This array will be in the exact same order as the array of input promises.

If any of the given Promises fails, the returned promise will immediately
fail with the first Promise that fails, and its reason.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:34:"(\Sabre\Event\Promise[] $promises)";s:13:"documentation";s:454:"This function takes an array of Promises, and returns a Promise that
resolves when all the given arguments have resolved.

The returned Promise will resolve with a value that's an array of all the
values the given promises have been resolved with.

This array will be in the exact same order as the array of input promises.

If any of the given Promises fails, the returned promise will immediately
fail with the first Promise that fails, and its reason.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:32:"\Sabre\Event\Promise[] $promises";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:26:"Sabre\Event\Promise\race()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:26:"Sabre\Event\Promise\race()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"race";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:73;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:96;s:9:"character";i:1;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:39:"function race(array $promises): Promise";s:13:"documentation";s:221:"The race function returns a promise that resolves or rejects as soon as
one of the promises in the argument resolves or rejects.

The returned promise will resolve or reject with the value or reason of
that first promise.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:34:"(\Sabre\Event\Promise[] $promises)";s:13:"documentation";s:221:"The race function returns a promise that resolves or rejects as soon as
one of the promises in the argument resolves or rejects.

The returned promise will resolve or reject with the value or reason of
that first promise.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:32:"\Sabre\Event\Promise[] $promises";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:29:"Sabre\Event\Promise\resolve()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Promise\resolve()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"resolve";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:106;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:116;s:9:"character";i:1;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:33:"function resolve($value): Promise";s:13:"documentation";s:196:"Returns a Promise that resolves with the given value.

If the value is a promise, the returned promise will attach itself to that
promise and eventually get the same state as the followed promise.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:14:"(mixed $value)";s:13:"documentation";s:196:"Returns a Promise that resolves with the given value.

If the value is a promise, the returned promise will attach itself to that
promise and eventually get the same state as the followed promise.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"mixed $value";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:28:"Sabre\Event\Promise\reject()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:28:"Sabre\Event\Promise\reject()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:6:"reject";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:121;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:127;s:9:"character";i:1;}}}s:13:"containerName";s:19:"Sabre\Event\Promise";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:43:"function reject(Throwable $reason): Promise";s:13:"documentation";s:57:"Returns a Promise that will reject with the given reason.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:20:"(\Throwable $reason)";s:13:"documentation";s:57:"Returns a Promise that will reject with the given reason.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"\Throwable $reason";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:19:"Sabre\Event\Version";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:19:"Sabre\Event\Version";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"Version";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Version.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:13;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:19;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:13:"class Version";s:13:"documentation";s:56:"This class contains the version number for this package.";s:20:"signatureInformation";N;}s:28:"Sabre\Event\Version::VERSION";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:28:"Sabre\Event\Version::VERSION";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"VERSION";s:4:"kind";i:14;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Version.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:18;s:9:"character";i:10;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:18;s:9:"character";i:27;}}}s:13:"containerName";s:19:"Sabre\Event\Version";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\String_":0:{}s:15:"declarationLine";s:24:"const VERSION = '5.1.4';";s:13:"documentation";s:20:"Full version number.";s:20:"signatureInformation";N;}s:16:"Sabre\Event\Loop";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:16:"Sabre\Event\Loop";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:16:"Sabre\Event\Loop";s:4:"kind";i:3;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:4;s:9:"character";i:27;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:27:"namespace Sabre\Event\Loop;";s:13:"documentation";N;s:20:"signatureInformation";N;}s:21:"Sabre\Event\Loop\Loop";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:21:"Sabre\Event\Loop\Loop";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"Loop";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:19;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:342;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";N;s:15:"declarationLine";s:10:"class Loop";s:13:"documentation";s:180:"A simple eventloop implementation.

This eventloop supports:
* nextTick
* setTimeout for delayed functions
* setInterval for repeating functions
* stream events using stream_select";s:20:"signatureInformation";N;}s:35:"Sabre\Event\Loop\Loop->setTimeout()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:35:"Sabre\Event\Loop\Loop->setTimeout()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:10:"setTimeout";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:24;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:55;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:56:"public function setTimeout(callable $cb, float $timeout)";s:13:"documentation";s:36:"Executes a function after x seconds.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:30:"(callable $cb, float $timeout)";s:13:"documentation";s:36:"Executes a function after x seconds.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:14:"float $timeout";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:36:"Sabre\Event\Loop\Loop->setInterval()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:36:"Sabre\Event\Loop\Loop->setInterval()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"setInterval";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:63;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:83;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:64:"public function setInterval(callable $cb, float $timeout): array";s:13:"documentation";s:122:"Executes a function every x seconds.

The value this function returns can be used to stop the interval with
clearInterval.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:30:"(callable $cb, float $timeout)";s:13:"documentation";s:122:"Executes a function every x seconds.

The value this function returns can be used to stop the interval with
clearInterval.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:14:"float $timeout";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:38:"Sabre\Event\Loop\Loop->clearInterval()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:38:"Sabre\Event\Loop\Loop->clearInterval()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"clearInterval";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:88;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:91;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:48:"public function clearInterval(array $intervalId)";s:13:"documentation";s:25:"Stops a running interval.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:19:"(array $intervalId)";s:13:"documentation";s:25:"Stops a running interval.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"array $intervalId";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:33:"Sabre\Event\Loop\Loop->nextTick()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:33:"Sabre\Event\Loop\Loop->nextTick()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:8:"nextTick";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:96;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:99;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:38:"public function nextTick(callable $cb)";s:13:"documentation";s:62:"Runs a function immediately at the next iteration of the loop.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:14:"(callable $cb)";s:13:"documentation";s:62:"Runs a function immediately at the next iteration of the loop.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:38:"Sabre\Event\Loop\Loop->addReadStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:38:"Sabre\Event\Loop\Loop->addReadStream()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"addReadStream";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:112;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:116;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:52:"public function addReadStream($stream, callable $cb)";s:13:"documentation";s:217:"Adds a read stream.

The callback will be called as soon as there is something to read from
the stream.

You MUST call removeReadStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:32:"(resource $stream, callable $cb)";s:13:"documentation";s:217:"Adds a read stream.

The callback will be called as soon as there is something to read from
the stream.

You MUST call removeReadStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:39:"Sabre\Event\Loop\Loop->addWriteStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:39:"Sabre\Event\Loop\Loop->addWriteStream()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"addWriteStream";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:129;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:133;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:53:"public function addWriteStream($stream, callable $cb)";s:13:"documentation";s:238:"Adds a write stream.

The callback will be called as soon as the system reports it's ready to
receive writes on the stream.

You MUST call removeWriteStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:32:"(resource $stream, callable $cb)";s:13:"documentation";s:238:"Adds a write stream.

The callback will be called as soon as the system reports it's ready to
receive writes on the stream.

You MUST call removeWriteStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:41:"Sabre\Event\Loop\Loop->removeReadStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:41:"Sabre\Event\Loop\Loop->removeReadStream()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:16:"removeReadStream";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:140;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:146;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:41:"public function removeReadStream($stream)";s:13:"documentation";s:33:"Stop watching a stream for reads.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:18:"(resource $stream)";s:13:"documentation";s:33:"Stop watching a stream for reads.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:42:"Sabre\Event\Loop\Loop->removeWriteStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:42:"Sabre\Event\Loop\Loop->removeWriteStream()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:17:"removeWriteStream";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:153;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:159;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:42:"public function removeWriteStream($stream)";s:13:"documentation";s:34:"Stop watching a stream for writes.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:18:"(resource $stream)";s:13:"documentation";s:34:"Stop watching a stream for writes.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:28:"Sabre\Event\Loop\Loop->run()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:28:"Sabre\Event\Loop\Loop->run()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:3:"run";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:167;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:175;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:21:"public function run()";s:13:"documentation";s:92:"Runs the loop.

This function will run continuously, until there's no more events to
handle.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:92:"Runs the loop.

This function will run continuously, until there's no more events to
handle.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:29:"Sabre\Event\Loop\Loop->tick()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Loop\Loop->tick()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"tick";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:189;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:212;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:47:"public function tick(bool $block = false): bool";s:13:"documentation";s:315:"Executes all pending events.

If $block is turned true, this function will block until any event is
triggered.

If there are now timeouts, nextTick callbacks or events in the loop at
all, this function will exit immediately.

This function will return true if there are _any_ events left in the
loop after the tick.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:21:"(bool $block = false)";s:13:"documentation";s:315:"Executes all pending events.

If $block is turned true, this function will block until any event is
triggered.

If there are now timeouts, nextTick callbacks or events in the loop at
all, this function will exit immediately.

This function will return true if there are _any_ events left in the
loop after the tick.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"bool $block = false";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:29:"Sabre\Event\Loop\Loop->stop()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Loop\Loop->stop()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"stop";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:217;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:220;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:22:"public function stop()";s:13:"documentation";s:26:"Stops a running eventloop.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:26:"Stops a running eventloop.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:37:"Sabre\Event\Loop\Loop->runNextTicks()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:37:"Sabre\Event\Loop\Loop->runNextTicks()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:12:"runNextTicks";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:227;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:235;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:33:"protected function runNextTicks()";s:13:"documentation";s:47:"Executes all 'nextTick' callbacks.

return void";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:47:"Executes all 'nextTick' callbacks.

return void";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:34:"Sabre\Event\Loop\Loop->runTimers()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:34:"Sabre\Event\Loop\Loop->runTimers()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"runTimers";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:247;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:259;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:37:"phpDocumentor\Reflection\Types\Float_":0:{}i:1;O:36:"phpDocumentor\Reflection\Types\Null_":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}s:15:"declarationLine";s:30:"protected function runTimers()";s:13:"documentation";s:209:"Runs all pending timers.

After running the timer callbacks, this function returns the number of
seconds until the next timer should be executed.

If there's no more pending timers, this function returns null.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:209:"Runs all pending timers.

After running the timer callbacks, this function returns the number of
seconds until the next timer should be executed.

If there's no more pending timers, this function returns null.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:35:"Sabre\Event\Loop\Loop->runStreams()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:35:"Sabre\Event\Loop\Loop->runStreams()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:10:"runStreams";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:269;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:292;s:9:"character";i:5;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:39:"protected function runStreams($timeout)";s:13:"documentation";s:126:"Runs all pending stream events.

If $timeout is 0, it will return immediately. If $timeout is null, it
will wait indefinitely.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:16:"(mixed $timeout)";s:13:"documentation";s:126:"Runs all pending stream events.

If $timeout is 0, it will return immediately. If $timeout is null, it
will wait indefinitely.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:14:"mixed $timeout";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:30:"Sabre\Event\Loop\Loop->running";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:30:"Sabre\Event\Loop\Loop->running";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"running";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:299;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:299;s:9:"character";i:22;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:19:"protected $running;";s:13:"documentation";s:24:"Is the main loop active.";s:20:"signatureInformation";N;}s:29:"Sabre\Event\Loop\Loop->timers";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Loop\Loop->timers";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:6:"timers";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:306;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:306;s:9:"character";i:21;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:18:"protected $timers;";s:13:"documentation";s:38:"A list of timers, added by setTimeout.";s:20:"signatureInformation";N;}s:31:"Sabre\Event\Loop\Loop->nextTick";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:31:"Sabre\Event\Loop\Loop->nextTick";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:8:"nextTick";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:313;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:313;s:9:"character";i:23;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:20:"protected $nextTick;";s:13:"documentation";s:31:"A list of 'nextTick' callbacks.";s:20:"signatureInformation";N;}s:34:"Sabre\Event\Loop\Loop->readStreams";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:34:"Sabre\Event\Loop\Loop->readStreams";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"readStreams";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:320;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:320;s:9:"character";i:26;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Resource_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:23:"protected $readStreams;";s:13:"documentation";s:65:"List of readable streams for stream_select, indexed by stream id.";s:20:"signatureInformation";N;}s:35:"Sabre\Event\Loop\Loop->writeStreams";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:35:"Sabre\Event\Loop\Loop->writeStreams";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:12:"writeStreams";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:327;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:327;s:9:"character";i:27;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Resource_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:24:"protected $writeStreams;";s:13:"documentation";s:65:"List of writable streams for stream_select, indexed by stream id.";s:20:"signatureInformation";N;}s:36:"Sabre\Event\Loop\Loop->readCallbacks";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:36:"Sabre\Event\Loop\Loop->readCallbacks";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"readCallbacks";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:334;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:334;s:9:"character";i:28;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:25:"protected $readCallbacks;";s:13:"documentation";s:45:"List of read callbacks, indexed by stream id.";s:20:"signatureInformation";N;}s:37:"Sabre\Event\Loop\Loop->writeCallbacks";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:37:"Sabre\Event\Loop\Loop->writeCallbacks";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"writeCallbacks";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:341;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:341;s:9:"character";i:29;}}}s:13:"containerName";s:21:"Sabre\Event\Loop\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:26:"protected $writeCallbacks;";s:13:"documentation";s:46:"List of write callbacks, indexed by stream id.";s:20:"signatureInformation";N;}s:29:"Sabre\Event\Loop\setTimeout()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:29:"Sabre\Event\Loop\setTimeout()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:10:"setTimeout";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:9;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:12;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:49:"function setTimeout(callable $cb, float $timeout)";s:13:"documentation";s:36:"Executes a function after x seconds.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:30:"(callable $cb, float $timeout)";s:13:"documentation";s:36:"Executes a function after x seconds.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:14:"float $timeout";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:30:"Sabre\Event\Loop\setInterval()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:30:"Sabre\Event\Loop\setInterval()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:11:"setInterval";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:20;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:23;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:57:"function setInterval(callable $cb, float $timeout): array";s:13:"documentation";s:122:"Executes a function every x seconds.

The value this function returns can be used to stop the interval with
clearInterval.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:30:"(callable $cb, float $timeout)";s:13:"documentation";s:122:"Executes a function every x seconds.

The value this function returns can be used to stop the interval with
clearInterval.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:14:"float $timeout";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:32:"Sabre\Event\Loop\clearInterval()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\Loop\clearInterval()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"clearInterval";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:28;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:31;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:41:"function clearInterval(array $intervalId)";s:13:"documentation";s:25:"Stops a running interval.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:19:"(array $intervalId)";s:13:"documentation";s:25:"Stops a running interval.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"array $intervalId";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:27:"Sabre\Event\Loop\nextTick()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:27:"Sabre\Event\Loop\nextTick()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:8:"nextTick";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:36;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:39;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:31:"function nextTick(callable $cb)";s:13:"documentation";s:62:"Runs a function immediately at the next iteration of the loop.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:14:"(callable $cb)";s:13:"documentation";s:62:"Runs a function immediately at the next iteration of the loop.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:32:"Sabre\Event\Loop\addReadStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\Loop\addReadStream()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:13:"addReadStream";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:52;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:55;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:45:"function addReadStream($stream, callable $cb)";s:13:"documentation";s:217:"Adds a read stream.

The callback will be called as soon as there is something to read from
the stream.

You MUST call removeReadStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:32:"(resource $stream, callable $cb)";s:13:"documentation";s:217:"Adds a read stream.

The callback will be called as soon as there is something to read from
the stream.

You MUST call removeReadStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:33:"Sabre\Event\Loop\addWriteStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:33:"Sabre\Event\Loop\addWriteStream()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"addWriteStream";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:68;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:71;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:46:"function addWriteStream($stream, callable $cb)";s:13:"documentation";s:238:"Adds a write stream.

The callback will be called as soon as the system reports it's ready to
receive writes on the stream.

You MUST call removeWriteStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:32:"(resource $stream, callable $cb)";s:13:"documentation";s:238:"Adds a write stream.

The callback will be called as soon as the system reports it's ready to
receive writes on the stream.

You MUST call removeWriteStream after you are done with the stream, to
prevent the eventloop from never stopping.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:12:"callable $cb";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:35:"Sabre\Event\Loop\removeReadStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:35:"Sabre\Event\Loop\removeReadStream()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:16:"removeReadStream";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:78;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:81;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:34:"function removeReadStream($stream)";s:13:"documentation";s:33:"Stop watching a stream for reads.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:18:"(resource $stream)";s:13:"documentation";s:33:"Stop watching a stream for reads.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:36:"Sabre\Event\Loop\removeWriteStream()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:36:"Sabre\Event\Loop\removeWriteStream()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:17:"removeWriteStream";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:88;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:91;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:35:"function removeWriteStream($stream)";s:13:"documentation";s:34:"Stop watching a stream for writes.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:18:"(resource $stream)";s:13:"documentation";s:34:"Stop watching a stream for writes.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:16:"resource $stream";s:13:"documentation";s:0:"";}}s:15:"activeParameter";N;}}s:22:"Sabre\Event\Loop\run()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:22:"Sabre\Event\Loop\run()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:3:"run";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:99;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:102;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:14:"function run()";s:13:"documentation";s:92:"Runs the loop.

This function will run continuously, until there's no more events to
handle.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:92:"Runs the loop.

This function will run continuously, until there's no more events to
handle.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:23:"Sabre\Event\Loop\tick()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:23:"Sabre\Event\Loop\tick()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"tick";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:116;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:119;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:40:"function tick(bool $block = false): bool";s:13:"documentation";s:315:"Executes all pending events.

If $block is turned true, this function will block until any event is
triggered.

If there are now timeouts, nextTick callbacks or events in the loop at
all, this function will exit immediately.

This function will return true if there are _any_ events left in the
loop after the tick.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:21:"(bool $block = false)";s:13:"documentation";s:315:"Executes all pending events.

If $block is turned true, this function will block until any event is
triggered.

If there are now timeouts, nextTick callbacks or events in the loop at
all, this function will exit immediately.

This function will return true if there are _any_ events left in the
loop after the tick.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"bool $block = false";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:23:"Sabre\Event\Loop\stop()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:23:"Sabre\Event\Loop\stop()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"stop";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:124;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:127;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:15:"function stop()";s:13:"documentation";s:26:"Stops a running eventloop.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:2:"()";s:13:"documentation";s:26:"Stops a running eventloop.";s:10:"parameters";a:0:{}s:15:"activeParameter";N;}}s:27:"Sabre\Event\Loop\instance()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:27:"Sabre\Event\Loop\instance()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:8:"instance";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:132;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:142;s:9:"character";i:1;}}}s:13:"containerName";s:16:"Sabre\Event\Loop";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:22:"\Sabre\Event\Loop\Loop";s:36:" phpDocumentor\Reflection\Fqsen name";s:4:"Loop";}}s:15:"declarationLine";s:45:"function instance(Loop $newLoop = null): Loop";s:13:"documentation";s:41:"Retrieves or sets the global Loop object.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:40:"(\Sabre\Event\Loop\Loop $newLoop = null)";s:13:"documentation";s:41:"Retrieves or sets the global Loop object.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:38:"\Sabre\Event\Loop\Loop $newLoop = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:43:"Sabre\Event\PromiseAlreadyResolvedException";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:43:"Sabre\Event\PromiseAlreadyResolvedException";s:7:"extends";a:1:{i:0;s:14:"LogicException";}s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:31:"PromiseAlreadyResolvedException";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:143:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/PromiseAlreadyResolvedException.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:14;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:16;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:61:"class PromiseAlreadyResolvedException extends \LogicException";s:13:"documentation";s:130:"This exception is thrown when the user tried to reject or fulfill a promise,
after either of these actions were already performed.";s:20:"signatureInformation";N;}s:27:"Sabre\Event\WildcardEmitter";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:27:"Sabre\Event\WildcardEmitter";s:7:"extends";a:1:{i:0;s:32:"Sabre\Event\WildcardEmitterTrait";}s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:15:"WildcardEmitter";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:127:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitter.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:32;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:35;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:49:"class WildcardEmitter implements EmitterInterface";s:13:"documentation";s:629:"This class is an EventEmitter with support for wildcard event handlers.

What this means is that you can emit events like this:

  emit('change:firstName')

and listen to this event like this:

  on('change:*')

A few notes:

- Wildcards only work at the end of an event name.
- Currently you can only use 1 wildcard.
- Using ":" as a separator is optional, but it's highly recommended to use
  some kind of separator.

The WildcardEmitter is a bit slower than the regular Emitter. If your code
must be very high performance, it might be better to try to use the other
emitter. For most usage the difference is negligible though.";s:20:"signatureInformation";N;}s:24:"Sabre\Event\EmitterTrait";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:24:"Sabre\Event\EmitterTrait";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:12:"EmitterTrait";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:19;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:177;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:18:"trait EmitterTrait";s:13:"documentation";s:219:"Event Emitter Trait.

This trait contains all the basic functions to implement an
EventEmitterInterface.

Using the trait + interface allows you to add EventEmitter capabilities
without having to change your base-class.";s:20:"signatureInformation";N;}s:30:"Sabre\Event\EmitterTrait->on()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:30:"Sabre\Event\EmitterTrait->on()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:2:"on";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:24;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:37;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:78:"public function on(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:22:"Subscribe to an event.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:22:"Subscribe to an event.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:32:"Sabre\Event\EmitterTrait->once()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\EmitterTrait->once()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"once";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:42;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:52;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:80:"public function once(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:60:"(string $eventName, callable $callBack, int $priority = 100)";s:13:"documentation";s:35:"Subscribe to an event exactly once.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $callBack";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:19:"int $priority = 100";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:32:"Sabre\Event\EmitterTrait->emit()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:32:"Sabre\Event\EmitterTrait->emit()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:4:"emit";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:75;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:104;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:103:"public function emit(string $eventName, array $arguments = [], callable $continueCallBack = null): bool";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:77:"(string $eventName, array $arguments = [], callable $continueCallBack = null)";s:13:"documentation";s:832:"Emits an event.

This method will return true if 0 or more listeners were successfully
handled. false is returned if one of the events broke the event chain.

If the continueCallBack is specified, this callback will be called every
time before the next event handler is called.

If the continueCallback returns false, event propagation stops. This
allows you to use the eventEmitter as a means for listeners to implement
functionality in your application, and break the event loop as soon as
some condition is fulfilled.

Note that returning false from an event subscriber breaks propagation
and returns false, but if the continue-callback stops propagation, this
is still considered a 'successful' operation and returns true.

Lastly, if there are 5 event handlers for an event. The continueCallback
will be called at most 4 times.";s:10:"parameters";a:3:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:21:"array $arguments = []";s:13:"documentation";N;}i:2;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:33:"callable $continueCallBack = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:37:"Sabre\Event\EmitterTrait->listeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:37:"Sabre\Event\EmitterTrait->listeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"listeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:114;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:130;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:40:"phpDocumentor\Reflection\Types\Callable_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:51:"public function listeners(string $eventName): array";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:19:"(string $eventName)";s:13:"documentation";s:131:"Returns the list of listeners for an event.

The list is returned as an array, and the list of events are sorted by
their priority.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:42:"Sabre\Event\EmitterTrait->removeListener()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:42:"Sabre\Event\EmitterTrait->removeListener()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:14:"removeListener";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:138;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:153;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Boolean":0:{}s:15:"declarationLine";s:75:"public function removeListener(string $eventName, callable $listener): bool";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:39:"(string $eventName, callable $listener)";s:13:"documentation";s:149:"Removes a specific listener from an event.

If the listener could not be found, this method will return false. If it
was removed it will return true.";s:10:"parameters";a:2:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:17:"string $eventName";s:13:"documentation";N;}i:1;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:18:"callable $listener";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:46:"Sabre\Event\EmitterTrait->removeAllListeners()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:46:"Sabre\Event\EmitterTrait->removeAllListeners()";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:18:"removeAllListeners";s:4:"kind";i:6;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:162;s:9:"character";i:4;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:169;s:9:"character";i:5;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:15:"declarationLine";s:60:"public function removeAllListeners(string $eventName = null)";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:26:"(string $eventName = null)";s:13:"documentation";s:172:"Removes all listeners.

If the eventName argument is specified, all listeners for that event are
removed. If it is not specified, every listener for every event is
removed.";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:24:"string $eventName = null";s:13:"documentation";N;}}s:15:"activeParameter";N;}}s:35:"Sabre\Event\EmitterTrait->listeners";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:35:"Sabre\Event\EmitterTrait->listeners";s:7:"extends";N;s:8:"isMember";b:1;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"listeners";s:4:"kind";i:7;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:176;s:9:"character";i:14;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:176;s:9:"character";i:24;}}}s:13:"containerName";s:24:"Sabre\Event\EmitterTrait";}s:4:"type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:15:"declarationLine";s:21:"protected $listeners;";s:13:"documentation";s:22:"The list of listeners.";s:20:"signatureInformation";N;}s:19:"Sabre\Event\Emitter";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:19:"Sabre\Event\Emitter";s:7:"extends";a:1:{i:0;s:24:"Sabre\Event\EmitterTrait";}s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:1;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:7:"Emitter";s:4:"kind";i:5;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Emitter.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:15;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:18;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";N;s:15:"declarationLine";s:41:"class Emitter implements EmitterInterface";s:13:"documentation";s:91:"Emitter object.

Instantiate this class, or subclass it for easily creating event emitters.";s:20:"signatureInformation";N;}s:23:"Sabre\Event\coroutine()";O:25:"LanguageServer\Definition":11:{s:3:"fqn";s:23:"Sabre\Event\coroutine()";s:7:"extends";N;s:8:"isMember";b:0;s:6:"roamed";b:0;s:8:"isStatic";b:0;s:17:"canBeInstantiated";b:0;s:17:"symbolInformation";O:40:"LanguageServerProtocol\SymbolInformation":4:{s:4:"name";s:9:"coroutine";s:4:"kind";i:12;s:8:"location";O:31:"LanguageServerProtocol\Location":2:{s:3:"uri";s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";s:5:"range";O:28:"LanguageServerProtocol\Range":2:{s:5:"start";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:54;s:9:"character";i:0;}s:3:"end";O:31:"LanguageServerProtocol\Position":2:{s:4:"line";i:122;s:9:"character";i:1;}}}s:13:"containerName";s:11:"Sabre\Event";}s:4:"type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:20:"\Sabre\Event\Promise";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Promise";}}s:15:"declarationLine";s:42:"function coroutine(callable $gen): Promise";s:13:"documentation";s:703:"Turn asynchronous promise-based code into something that looks synchronous
again, through the use of generators.

Example without coroutines:

$promise = $httpClient->request('GET', '/foo');
$promise->then(function($value) {

  return $httpClient->request('DELETE','/foo');

})->then(function($value) {

  return $httpClient->request('PUT', '/foo');

})->error(function($reason) {

  echo "Failed because: $reason\n";

});

Example with coroutines:

coroutine(function() {

  try {
    yield $httpClient->request('GET', '/foo');
    yield $httpClient->request('DELETE', /foo');
    yield $httpClient->request('PUT', '/foo');
  } catch(\Throwable $reason) {
    echo "Failed because: $reason\n";
  }

});";s:20:"signatureInformation";O:43:"LanguageServerProtocol\SignatureInformation":4:{s:5:"label";s:15:"(callable $gen)";s:13:"documentation";s:703:"Turn asynchronous promise-based code into something that looks synchronous
again, through the use of generators.

Example without coroutines:

$promise = $httpClient->request('GET', '/foo');
$promise->then(function($value) {

  return $httpClient->request('DELETE','/foo');

})->then(function($value) {

  return $httpClient->request('PUT', '/foo');

})->error(function($reason) {

  echo "Failed because: $reason\n";

});

Example with coroutines:

coroutine(function() {

  try {
    yield $httpClient->request('GET', '/foo');
    yield $httpClient->request('DELETE', /foo');
    yield $httpClient->request('PUT', '/foo');
  } catch(\Throwable $reason) {
    echo "Failed because: $reason\n";
  }

});";s:10:"parameters";a:1:{i:0;O:43:"LanguageServerProtocol\ParameterInformation":2:{s:5:"label";s:13:"callable $gen";s:13:"documentation";N;}}s:15:"activeParameter";N;}}}s:10:"references";a:90:{s:28:"Sabre\Event\EmitterInterface";a:3:{i:0;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EventEmitter.php";i:1;s:127:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitter.php";i:2;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Emitter.php";}s:24:"Sabre\Event\EmitterTrait";a:2:{i:0;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EventEmitter.php";i:1;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Emitter.php";}s:8:"strlen()";a:1:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";}s:8:"substr()";a:1:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";}s:19:"->wildcardListeners";a:1:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";}s:11:"->listeners";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:15:"->listenerIndex";a:1:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";}s:18:"->removeListener()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:22:"call_user_func_array()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:15:"func_get_args()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:6:"->on()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:9:"is_null()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:13:"->listeners()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:7:"count()";a:4:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";i:2;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";i:3;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:18:"array_key_exists()";a:1:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";}s:17:"array_multisort()";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:24:"Sabre\Event\SORT_NUMERIC";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:12:"SORT_NUMERIC";a:2:{i:0;s:132:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitterTrait.php";i:1;s:124:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/EmitterTrait.php";}s:9:"Exception";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:9:"Throwable";a:3:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";i:2;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:28:"Sabre\Event\Promise::PENDING";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:19:"Sabre\Event\Promise";a:3:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";i:2;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:26:"Sabre\Event\Promise->state";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:32:"Sabre\Event\Promise->subscribers";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:30:"Sabre\Event\Promise::FULFILLED";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:37:"Sabre\Event\Promise->invokeCallback()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:29:"Sabre\Event\Promise::REJECTED";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:27:"Sabre\Event\Promise->then()";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";}s:43:"Sabre\Event\PromiseAlreadyResolvedException";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:26:"Sabre\Event\Promise->value";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:14:"LogicException";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:143:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/PromiseAlreadyResolvedException.php";}s:23:"Sabre\Event\Loop\tick()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:16:"Sabre\Event\Loop";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:11:"Sabre\Event";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";}s:5:"Sabre";a:2:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";}s:6:"tick()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:27:"Sabre\Event\Loop\nextTick()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:10:"nextTick()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:25:"Sabre\Event\is_callable()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:13:"is_callable()";a:1:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";}s:30:"Sabre\Event\Promise->fulfill()";a:3:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";i:2;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:29:"Sabre\Event\Promise->reject()";a:3:{i:0;s:119:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise.php";i:1;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";i:2;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:32:"Sabre\Event\Promise->otherwise()";a:1:{i:0;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";}s:27:"Sabre\Event\Promise\count()";a:1:{i:0;s:129:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Promise/functions.php";}s:28:"Sabre\Event\Loop\microtime()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:11:"microtime()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:29:"Sabre\Event\Loop\Loop->timers";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:24:"Sabre\Event\Loop\count()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:31:"Sabre\Event\Loop\array_splice()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:14:"array_splice()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:32:"Sabre\Event\Loop\array_unshift()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:15:"array_unshift()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:35:"Sabre\Event\Loop\Loop->setTimeout()";a:2:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";i:1;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:31:"Sabre\Event\Loop\Loop->nextTick";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:34:"Sabre\Event\Loop\Loop->readStreams";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:36:"Sabre\Event\Loop\Loop->readCallbacks";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:35:"Sabre\Event\Loop\Loop->writeStreams";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:37:"Sabre\Event\Loop\Loop->writeCallbacks";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:30:"Sabre\Event\Loop\Loop->running";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:29:"Sabre\Event\Loop\Loop->tick()";a:2:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";i:1;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:37:"Sabre\Event\Loop\Loop->runNextTicks()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:34:"Sabre\Event\Loop\Loop->runTimers()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:29:"Sabre\Event\Loop\is_numeric()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:12:"is_numeric()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:35:"Sabre\Event\Loop\Loop->runStreams()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:28:"Sabre\Event\Loop\array_pop()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:11:"array_pop()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:22:"Sabre\Event\Loop\max()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:5:"max()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:32:"Sabre\Event\Loop\stream_select()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:15:"stream_select()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:25:"Sabre\Event\Loop\usleep()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:8:"usleep()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:25:"Sabre\Event\Loop\intval()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:8:"intval()";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/Loop.php";}s:27:"Sabre\Event\Loop\instance()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:10:"instance()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:21:"Sabre\Event\Loop\Loop";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:32:"Sabre\Event\WildcardEmitterTrait";a:1:{i:0;s:127:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/WildcardEmitter.php";}s:9:"Generator";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:24:"InvalidArgumentException";a:1:{i:0;s:121:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/coroutine.php";}s:36:"Sabre\Event\Loop\Loop->setInterval()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:38:"Sabre\Event\Loop\Loop->clearInterval()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:33:"Sabre\Event\Loop\Loop->nextTick()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:38:"Sabre\Event\Loop\Loop->addReadStream()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:39:"Sabre\Event\Loop\Loop->addWriteStream()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:41:"Sabre\Event\Loop\Loop->removeReadStream()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:42:"Sabre\Event\Loop\Loop->removeWriteStream()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:28:"Sabre\Event\Loop\Loop->run()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}s:29:"Sabre\Event\Loop\Loop->stop()";a:1:{i:0;s:126:"file:///home/23SP/23SP_haseebz/.vscode-server/extensions/zobo.php-intellisense-1.1.2/vendor/sabre/event/lib/Loop/functions.php";}}s:8:"complete";b:1;s:14:"staticComplete";b:1;}